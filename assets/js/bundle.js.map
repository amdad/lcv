{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","assets/js/app.js","assets/js/lib/pubsub.js","assets/js/modules/common.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourceRoot":"/assets/js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","console.log('â–²');\n\nvar common = require('common');\n","/*\n *\n * PubSub for simple communication between modules\n *\n * use:\n *\n * var pubsub = require('pubsub');\n *\n * function func(arg1, arg2) {\n *     console.log(arg1 + ' ' + arg2);\n * }\n *\n * pubsub.on('hello', func);\n * or\n * pubsub.once('hello', func);\n *\n * pubsub.emit('hello', 'Hello', 'World');\n *\n * pubsub.off('hello', func); // function specific\n * or\n * pubsub.off('hello'); // all listeners for 'hello'\n * or\n * pubsub.off(); // resets pubsub\n *\n *\n * console.log(pubsub.listeners()); // Object of all current listeners\n */ \n\nvar _listeners = {};\n\nvar em = {\n\n    _addListener: function(call, listener, once) {\n        if (typeof listener !== 'function') {\n            console.error('listener must be a function');\n            return;\n        }\n\n        _listeners[call] = _listeners[call] || [];\n\n        // If already subscribed, don't duplicate\n        var match;\n        _listeners[call].every(function(e, i) {\n            if (e.listener == listener) {\n                match = true;\n                return false;\n            }\n            return true;\n        });\n        if (match) {\n            console.error('listener already subscribed');\n            return;\n        }\n\n        _listeners[call].push({\n            once: once,\n            fn: function () {\n                return listener.apply(this, arguments);\n            },\n\n            // Store string to test against during removal\n            listener: listener\n        });\n    },\n\n    listeners: function () {\n        return _listeners;\n    },\n\n    on: function (call, listener) {\n        em._addListener(call, listener, 0);\n    },\n\n    once: function (call, listener) {\n        em._addListener(call, listener, 1);\n    },\n\n    off: function (call, listener) {\n\n        // If precise listener included, only remove that listing\n        if (listener) {\n            if (!_listeners[call]) {\n                console.error('Event \"' + call + '\" doesn\\'t exist');\n                return;\n            }\n\n            _listeners[call].every(function(e, i) {\n                if (e.listener == listener) {\n                    _listeners[call].splice(i, 1);\n\n                    if (_listeners[call].length === 0) delete _listeners[call];\n                    return false;\n                }\n\n                return true;\n            });\n\n        // Remove all listeners for the call\n        } else if (call) {\n            delete _listeners[call];\n            return;\n        }\n\n        // Remove all listeners of all calls\n\n        //TODO: which is better ?\n        if (!call) for (var e in _listeners) delete _listeners[e];\n        // if (!call) _listeners = {};\n    },\n\n    emit: function (call) {\n        if (!_listeners[call]) {\n            console.error('Noone listening to event: \"' + call + '\"');\n            return;\n        }\n\n        var args = Array.prototype.slice.call(arguments, 1);\n\n        // Reverse, so that the functions are called in the right order during backwards loop\n        _listeners[call].reverse();\n\n        // Loop backwards, so that listeners can be removed during if only triggered once\n        for (var i = _listeners[call].length - 1; i >= 0; i--) {\n            var e = _listeners[call][i];\n            e.fn.apply(this, args);\n\n            // remove events that run only once\n            // if (e.once) em.off(call, e.listener);\n            if (e.once) {\n                _listeners[call].splice(i, 1);\n                if (_listeners[call].length === 0) delete _listeners[call];\n            }\n        }\n\n        // Reverse list again to normal direction\n        if (_listeners[call]) _listeners[call].reverse();\n    }\n};\n\nmodule.exports = em;\n\n\n\n","var pubsub = require('pubsub');\n\n// Global resize\nfunction resize() {\n    pubsub.emit('resize', window.innerWidth, window.innerHeight);\n}\n\n// Only native resize listener on site\nwindow.addEventListener('resize', resize, false);\n\n// Can be forced from any\npubsub.on('global-resize', resize);\n\n// Global stuff (not module-dependant, preloading, etc)\n"]}